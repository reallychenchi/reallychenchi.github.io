<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈池的博客</title>
    <description>陈池的博客</description>
    <link>http://www.chenchi.cc//</link>
    <atom:link href="http://www.chenchi.cc//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 Jun 2018 17:21:33 +0800</pubDate>
    <lastBuildDate>Tue, 12 Jun 2018 17:21:33 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Welcome to 晨池&#39;s Page!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jun 2018 20:07:14 +0800</pubDate>
        <link>http://www.chenchi.cc//jekyll/update/2018/06/11/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://www.chenchi.cc//jekyll/update/2018/06/11/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>VIM正则表达式之零宽断言</title>
        <description>&lt;p&gt;零宽断言就是zero-width，我觉得很难懂，但是搞清楚了其实很简单：&lt;/p&gt;

&lt;p&gt;:echo matchstr(“abc1234def”, “\\v(abc)@&amp;lt;=(.{-})(def)@=”)&lt;/p&gt;

&lt;p&gt;　　比如上述例子是一个典型的零宽断言应用，要求是abc的后面，def的前面，需要结合两个零宽断言来写，正则表达式结构看起来复杂其实简单：&lt;/p&gt;

&lt;p&gt;“(abc)@&amp;lt;=(.{-})(def)@=”&lt;/p&gt;

&lt;p&gt;　　可以分成三部分：&lt;/p&gt;

&lt;p&gt;(abc)&lt;/p&gt;

&lt;p&gt;　　这是匹配前面的正则表达式，放在@&amp;lt;=前面，表示所要取得的字符串，是在能匹配这个正则表达式的部分的后面&lt;/p&gt;

&lt;p&gt;(def)&lt;/p&gt;

&lt;p&gt;　　这是匹配后面的正则表达式，放在@=的前面，表示所要取得的字符串，是在能匹配这个正则表达式的部分的前面&lt;/p&gt;

&lt;p&gt;(.{-})&lt;/p&gt;

&lt;p&gt;　　这就是我们要取得的字符串的正则表达式了，这里{-}是表示尽可能短的一个字符串，不是蛤总的一个眼镜框。&lt;/p&gt;

&lt;p&gt;　　额外说明一下，\\v是一个前缀，它表示这个字符串完全使用正则表达式，星号不是星号，是代表任意匹配，@&amp;lt;=也不是三个普通字符，而是代表前置零宽断言，因为在字符串里面，所以使用两个斜杠，如果在vim查找当中使用，只要一个就可以了 :/\v(abc)@&amp;lt;=(.{-})(def)@= ，会在1234那里匹配成功。&lt;/p&gt;

&lt;p&gt;　　也就是说，要写一个零宽断言，获取两个正则表达式之间的部分，可以分成 (表达式前)@&amp;lt;=(表达式)(表达式后)@=，表示取得“表达式前”和“表达式后”之间，能够匹配”表达式“的字符串。按照这个路数往上套就可以了。零否断言也一样原理。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://teacher.edu.cn/pc/article/201303/578901.html&quot;&gt;教育网&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Mar 2013 02:30:14 +0800</pubDate>
        <link>http://www.chenchi.cc//jekyll/update/2013/03/19/vim-zerowidth.html</link>
        <guid isPermaLink="true">http://www.chenchi.cc//jekyll/update/2013/03/19/vim-zerowidth.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
